plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id "me.hypherionmc.modutils.modpublisher" version "1.0.+"
}

archivesBaseName = "${mod_id}-fabric-${minecraft_version}"

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    // Core
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    implementation project(path: ':Common', configuration: 'namedElements')

    // Add your deps here
    implementation "com.hypherionmc.craterlib:CraterLib-fabric-1.19.2:${craterlib}:dev"
    implementation("com.hypherionmc.sdlink:sdlink-core:${library_ver}")
    implementation("me.hypherionmc.sdlink:mcdiscordformatter-common-1.19.1:${formatter_ver}")

    shade("com.hypherionmc.sdlink:sdlink-core:${library_ver}")
    shade "me.hypherionmc.sdlink:mcdiscordformatter-fabric-1.19.1:${formatter_ver}"

    modCompileOnly "maven.modrinth:fabrictailor:2.0.1"
    modCompileOnly "maven.modrinth:simplechatfork:1.6.1"
    modCompileOnly "maven.modrinth:vanish:1.4.0+1.19.3"
}

shadowJar {
    from sourceSets.main.output

    configurations = [project.configurations.shade]
}

remapJar {
    //dependsOn shadowJar
    inputFile = shadowJar.archiveFile.get()
}

prepareRemapJar.dependsOn(shadowJar)

loom {
    shareCaches()
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

processResources {
    from project(':Common').sourceSets.main.resources
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }

    filesMatching("${mod_id}.mixins.json") {
        expand "refmap_target": "${archivesBaseName}-"
    }
}

tasks.withType(JavaCompile) {
    source(project(':Common').sourceSets.main.allSource)
}

task delDevJar {
    doLast {
        def tree = fileTree('build/libs')
        tree.include '**/*-dev.jar'
        tree.include '**/*-all.jar'
        tree.each { it.delete() }
    }
}
build.finalizedBy delDevJar

publisher {
    apiKeys {
        modrinth = System.getenv("MODRINTH_TOKEN")
        curseforge = System.getenv("CURSE_TOKEN")
    }

    curseID = 541320
    modrinthID = modrinth_id
    versionType = "release"
    changelog = rootProject.file("changelog-fabric.md")
    version = "${minecraft_version}-${project.version}"
    displayName = "[FABRIC/QUILT 1.19.x] Simple Discord Link - ${project.version}"
    gameVersions = ["1.19.2", "1.19.3", "1.19.4"]
    loaders = ["fabric", "quilt"]
    artifact = remapJar

    modrinthDepends {
        required = ["P7dR8mSH", "Nn8Wasaq"]
    }

    curseDepends {
        required = ["fabric-api", "craterlib"]
    }
}

publishMod.dependsOn(build)