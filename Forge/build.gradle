plugins {
    id "me.hypherionmc.modutils.modpublisher" version "1.0.+"
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'

archivesBaseName = "${mod_name}-forge-${minecraft_version}"

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
    config "${mod_id}.forge.mixins.json"
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}.forge.mixins.json"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}.forge.mixins.json"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}.forge.mixins.json"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

configurations {
    shade
    implementation.extendsFrom(shade)
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")
    annotationProcessor 'org.spongepowered:mixin:0.8.4-SNAPSHOT:processor'

    shade("me.hypherionmc.sdlink:sdlink-lib:${library_ver}")
    shade("me.hypherionmc.sdlink:mcdiscordformatter-forge-1.19.1:${formatter_ver}")
    implementation "me.hypherionmc.craterlib:CraterLib-forge-1.20:${craterlib}"
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources

    filesMatching('*.mixins.json') {
        expand "refmap_target": "${mod_id}."
    }
}

/**
 * Shadowjar Config
 */
shadowJar {
    configurations = [project.configurations.shade]
    dependencies {
        relocate 'me.hypherionmc.moonconfig', 'shadow.hypherionmc.moonconfig'
    }
    setArchiveClassifier('')
}

assemble.dependsOn(shadowJar)

reobf {
    shadowJar {}
}

/**
 * Publishing Config
 */
publisher {
    apiKeys {
        modrinth = System.getenv("MODRINTH_TOKEN")
        curseforge = System.getenv("CURSE_TOKEN")
    }

    curseID = 541320
    modrinthID = modrinth_id
    versionType = "release"
    changelog = rootProject.file("changelog-forge.md")
    version = "${minecraft_version}-${project.version}"
    displayName = "[FORGE 1.20] Simple Discord Link - ${project.version}"
    gameVersions = ["1.20"]
    loaders = ["forge"]
    artifact = shadowJar

    modrinthDepends {
        required = ["Nn8Wasaq"]
    }

    curseDepends {
        required = ["craterlib"]
    }
}

publishCurseforge.dependsOn(reobfShadowJar)
publishModrinth.dependsOn(reobfShadowJar)
jar.finalizedBy('reobfJar')
