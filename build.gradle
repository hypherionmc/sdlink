subprojects {
    apply plugin: 'java'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)

    def version_base = "${version}"
    version = version_base + (version_patch > 0 ? ".${version_patch}" : "")

    // Jenkins
    ext {
        release=project.properties['release'] ?: false
    }
    if (System.getenv('BUILD_NUMBER') != null && project.release == false) {
        version = version_base + "." + System.getenv('BUILD_NUMBER') + "d"
    }

    jar {
        manifest {
            attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'              : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : minecraft_version
            ])
        }
    }

    repositories {
        mavenCentral()
        //mavenLocal()
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'Hypherion Maven'
            url = 'https://maven.firstdarkdev.xyz/releases/'
        }
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    clean {
        delete "$rootDir/artifacts"
    }

    task copyAllArtifacts(type: Copy) {
        if (project.name !== "Common") {
            from "$buildDir/libs"
            into "$rootDir/artifacts"
            include("*.jar")
            delete("$rootDir/artifacts/*-common-*.jar")
        }
    }

    build.finalizedBy(copyAllArtifacts)
}

