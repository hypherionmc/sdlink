plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.0.0' apply false
    id "xyz.wagyourtail.unimined" version "1.1.0-SNAPSHOT" apply false
    id "com.hypherionmc.modutils.modfusioner" version "1.0.9"
    id "me.hypherionmc.modutils.modpublisher" version "1.0.+"
}

ext {
    release=project.properties['release'] ?: false
}

var base_version = "${version_major}.${version_minor}"
var final_version = "${base_version}.${version_patch}"

// CI Support
if (!release && System.getenv('BUILD_NUMBER') != null) {
    final_version = "${base_version}.${System.getenv('BUILD_NUMBER')}d"
}

group = project_group
version = "${final_version}"

subprojects {
    apply plugin: "xyz.wagyourtail.unimined"
    apply plugin: "java"
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.johnrengelman.shadow'

    group = rootProject.group
    version = rootProject.version

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17


    repositories {
        mavenCentral()
        maven {
            name = 'First Dark Maven'
            url = 'https://maven.firstdark.dev/releases/'
        }
        maven {
            name = 'First Dark Maven Snapshots'
            url = 'https://maven.firstdark.dev/snapshots/'
        }

        maven {
            name = 'First Dark Mirror'
            url = 'https://mcentral.firstdark.dev/releases/'
        }

        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }
    }

    configurations {
        shade
        modCompileOnly
        implementation.extendsFrom shade
        compileOnly.extendsFrom modCompileOnly
    }

    dependencies {
        shade("com.hypherionmc.sdlink:sdlink-core:${library_ver}")
    }

    jar {
        manifest {
            attributes([
                    'Specification-Title'     : mod_id,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : project.jar.archiveVersion,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestamp'               : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Build-On-Minecraft'      : minecraft_version
            ])
        }
    }

    /**
     * ===============================================================================
     * =       DO NOT EDIT BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING        =
     * ===============================================================================
     */

    unimined.minecraft(sourceSets.main, true) {
        version minecraft_version

        mappings {
            mojmap()
            devNamespace "mojmap"
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    clean {
        delete "$rootDir/artifacts"
    }

    if (project.name !== 'Common') {
        tasks.register('delDevJar') {
            doLast {
                def tree = fileTree('build/libs')
                tree.include '**/*-dev-shadow.jar'
                tree.include '**/*-dev.jar'
                tree.include '**/*-all.jar'
                tree.include '**/*-slim.jar'
                tree.each { it.delete() }
            }
        }
        build.finalizedBy delDevJar

        tasks.register('copyAllArtifacts', Copy) {
            from "$buildDir/libs"
            into "$rootDir/artifacts"
            include("*.jar")
        }

        build.finalizedBy(copyAllArtifacts)
    }
}

fusioner {
    packageGroup = project.group
    mergedJarName = "SimpleDiscordLink-Combo-${minecraft_version}"
    //outputDirectory = "artifacts/merged"
    jarVersion = final_version

    forge {
        projectName = "Forge"
        inputTaskName = "remapJar"

        mixin "${mod_id}.mixins.json"
        mixin "${mod_id}-forge.mixins.json"

        addRelocate "me.hypherionmc.mcdiscordformatter", "forge.me.hypherionmc.mcdiscordformatter"
    }

    fabric {
        projectName = "Fabric"
        inputTaskName = "remapJar"

        addRelocate "me.hypherionmc.mcdiscordformatter", "fabric.me.hypherionmc.mcdiscordformatter"
    }

    relocateDuplicate "com.hypherionmc.sdlink.shaded"
}

publisher {
    apiKeys {
        modrinth = System.getenv("MODRINTH_TOKEN")
        curseforge = System.getenv("CURSE_TOKEN")
    }

    debug = true
    curseID = curse_id
    modrinthID = modrinth_id
    versionType = "release"
    changelog = rootProject.file("changelog.md")
    version = "${minecraft_version}-${project.version}"
    displayName = "[1.18.2] Simple Discord Link - ${project.version}"
    gameVersions = ["1.18.2"]
    loaders = ["forge", "fabric", "quilt"]
    artifact = fusejars

    modrinthDepends {
        required = ["Nn8Wasaq"]
    }

    curseDepends {
        required = ["craterlib"]
    }
}